/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gameoflifr;

import java.util.Random;

/**
 *
 * @author taserface
 */
public class GridLife {
    private static int generation = 1;
    
    
    
    //int w = 8;
    int columns, rows;
    
    //Grille
    int[][] board;
    
    
    //Constructeur;
    public GridLife(int col, int row){
        this.columns = col;
        this.rows = row;
        
        board = new int[columns][rows];
        initialisation();
        //initGlader();
    }
    
    public void printGrid(int[][] toPrint){
        int count = 0;
        for(int i = 0; i < columns; i = i+1){
            for(int j = 0; j < rows; j = j+1){
                //System.out.print(this.board[i][j]+"   ");
                if(toPrint[i][j] == 1){
                    count++;
                    System.out.print("# ");
                }else
                    System.out.print(". ");
            }
            System.out.println();
        }
        System.out.println("Le nombre de cellule vivante est: "+count);
    }
    
    public void initialisation(){
        Random r = new Random();
        for(int i = 0; i < this.columns; i = i+1){
            for(int j = 1; j < this.rows; j = j+1){
                board[i][j] = (int)r.nextInt(2); //generate number between 0 and 1
                
            }
        }
    }
    
    public void initGlader(){
        /*this.board[1][2]= 1;
        this.board[2][3]= 1;
        this.board[3][3]= 1;
        this.board[3][2]= 1;
        this.board[3][1]= 1;
        */
        for(int i = 0; i < columns; i++){
            for(int j = 0; j < rows; j++){
                if((i == 1 && j == 2) || (i == 2 && j == 3) || (i == 3 && j == 3) || (i == 3 && j == 2) || (i == 3 && j == 1) ){
                    board[i][j] = 1;
                }else
                    board[i][j] = 0;
                
            }
        }
    }
    //compter le nombre de voisin en vie
    public int countNeighborsLive(int[][] tab, int x, int y){
        int sum = 0;
        for(int i = -1; i < 2; i = i+1){
            for(int j = -1; j < 2; j = j+1){
                //sum += tab[x+i][y+j];
                int col = (x + i + this.columns)% this.columns;
                int row = (y + j + this.rows) % this.rows;
                sum += tab[col][row];
            }
        }
        
        //ne pas compter la cellule active
        sum -= tab[x][y];
       
        return sum;
    }
    
    public int[][] affecterUnTableau(int[][] originale, int[][] copie){
        for(int i = 0; i < originale.length; i = i+1){
            for(int j = 0; j < originale[i].length; j = j+1){
                copie[i][j] = originale[i][j];
            }
        }
        return copie;
    }
    //Création de la nouvelle génération
    public void nextGen() throws InterruptedException{
       
        int liveNeighbors;
        
        int[][] next = new int[columns][rows];
        printGrid(board);
        System.out.println("Génération: "+GridLife.generation);
        while(true){
            Thread.sleep(2000);
        for(int i = 0; i < this.columns; i = i+1){
            for(int j = 0; j < this.rows; j = j+1){
            
                int state = board[i][j]; //l'état actuel à 1 ou non
                
                /*if(i == 0 || i == columns-1 || j == 0 || j == rows -1){
                    next[i][j] = state;
                }else{
                */
                    liveNeighbors = countNeighborsLive(board,i,j);
                    //System.out.println("live Neighbors = "+liveNeighbors);

                    /* règle de vie */
                    if(liveNeighbors == 3 && state == 0){
                        next[i][j] = 1;
                    }else if(state == 1 && (liveNeighbors < 2 || liveNeighbors > 3)){
                        next[i][j] = 0;
                    }else{
                        next[i][j] = state;
                    }

                
                
                
                //Calcul des voisins vivants
                /*
                liveNeighbors += board[i-1][j-1];
                liveNeighbors += board[i-1][j];
                liveNeighbors += board[i-1][j+1];
                liveNeighbors += board[i][j-1];
                liveNeighbors += board[i][j+1];
                liveNeighbors += board[i+1][j-1];
                liveNeighbors += board[i+1][j];
                liveNeighbors += board[i+1][j+1];
                */
            }
           // }
        }
        GridLife.generation++;
        printGrid(next);
        System.out.println("Génération: "+GridLife.generation);
        //board = next.clone();
        board = affecterUnTableau(next,board);
        
    } // fin while(true)
    }
    
}
